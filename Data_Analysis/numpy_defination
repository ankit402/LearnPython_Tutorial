NumPy is a fundamental component of the data scientist’s toolkit.
It allows for efficient data processing in Python, even at large volumes.

The toolset provided by NumPy, such as easy element-wise calculations, matrix multiplication, and vectorization,
makes it a top choice for performing complex calculations in Python

1. What is NumPy, and why is it used in data science?

due to its performance reason for the large datasets and make the computation of large data arrays faster and easier
in python.

1. supports for large multi dimensional arrays and matrics which are essential to handle large datasets.
2. collection of mathematical functions to operate on these arrays efficiently enabling fast computations on large
data sets.
3. vectorization operations its allows for efficient execution of complex mathematical operations.
4. memory-efficient when working with big data.

2.2. How do you create a 1D array in NumPy?
import numpy as np
arr_np = np.array([1,2,3])


3. What's the difference between a Python list and a NumPy array?

Homogeneity --> all element should be in same type (datatype) in numpy but Python lists can contain elements of different types
Memory efficiency:
Performance: faster performance without explicit loop we can perform operations
Functionality: mathematical operations directly applies on the array which is not possible in python

4. How do you check the shape and size of a NumPy array?

import numpy as np
arr_np = np.array([1,2,3])
print(arr_np.shape)
print(arr_np.size)

5. How do you reshape a NumPy array?
import numpy as np
arr_np = np.array([1,2,3])
reshape = arr_np.reshape(1,3)
print(reshape)


6. How do you create an array of all zeros or all ones?
zeros_arr = np.zeros((3, 4))
print(zeros_arr)

7. How to print all ones
print(np.ones(3,4))


7. What is broadcasting in NumPy?

Broadcasting is a key NumPy behavior that allows for efficient operations on arrays of different sizes.

Simply put, it allows for arithmetic operations between arrays of different sizes by ensuring both
 arrays have compatible shapes. This is done when NumPy automatically replicates
smaller arrays across the larger array so that they have compatible shapes.

a = np.array([1, 2, 3])
b = np.array([[1], [2], [3]])
print(a+b)

8. How do you find the mean, median, and standard deviation of a NumPy array?
mean, median, and standard deviation are key descriptive statistics commonly used to understand our data.

call mean median and std method from np


9. How can we utilize NumPy to quickly query our numerical data and perform actions based on a boolean statement?

While we think of NumPy’s primary purpose as a calculation package,

it also has powerful "data-wrangling" capabilities.

NumPy can easily query data through boolean indexing and perform operations based on results.
The where() method is particularly useful when we want to make changes to our data based on numerical values.

Assume we have a data frame of exam scores named df and want to categorize the students. A simple np.where() may look like:

df[‘student_cat’] = np.where(df[‘score’] > 80, ‘good’, ‘bad’)

Note that the where() method takes up to 3 inputs:

    The first is the boolean statement of any kind
    The second is the result if true
    The third is the result if false
10. What is a way to utilize NumPy for something like Mean Squared Error?

? looking in the answer for brief overview

***************************Advanced NumPy Interview Questions******************************

11. How can you compute the rolling statistics using NumPy, such as a rolling mean?
12. How do you perform advanced indexing to select elements from a multidimensional array based on a condition?
13. How can you use NumPy to perform a linear algebra operation like matrix decomposition or solve a linear equation system?
14. How can you optimize memory usage when working with large arrays in NumPy?
15. How can you handle and manipulate arrays with missing or infinite values in NumPy?

